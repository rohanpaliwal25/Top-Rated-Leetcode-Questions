https://leetcode.com/problems/binary-subarrays-with-sum/description/?envType=daily-question&envId=2024-03-14

----------------------------------------------------------------------------------------------------------------
Problem:-

Given a binary array nums and an integer goal, return the number of non-empty subarrays with a sum goal.

A subarray is a contiguous part of the array.

 

Example 1:

Input: nums = [1,0,1,0,1], goal = 2
Output: 4
Explanation: The 4 subarrays are bolded and underlined below:
[1,0,1,0,1]
[1,0,1,0,1]
[1,0,1,0,1]
[1,0,1,0,1]
Example 2:

Input: nums = [0,0,0,0,0], goal = 0
Output: 15
 

Constraints:

1 <= nums.length <= 3 * 104
nums[i] is either 0 or 1.
0 <= goal <= nums.length

--------------------------------------------------------------------------------------------------------------

Solution :- 

class Solution {
    public int numSubarraysWithSum(int[] nums, int goal) {
        
        return atMost(nums, goal) - atMost(nums, goal - 1);
    }

    public int atMost(int[] nums, int goal)
    {
        int left = 0, right = 0, result = 0, sum = 0;

        for(; right < nums.length; right++)
        {
            sum += nums[right];

            while(left <= right && sum > goal)
            {
                sum -= nums[left];
                left++;
            }

            result += right - left + 1; 
        }
        return result;
    }
}

Summary:-

TC O(N)
SC O(1)
