https://leetcode.com/problems/minimum-time-difference/description/

Problem: -


Given a list of 24-hour clock time points in "HH:MM" format, return the minimum minutes difference between any two time-points in the list.
 

Example 1:

Input: timePoints = ["23:59","00:00"]
Output: 1
Example 2:

Input: timePoints = ["00:00","23:59","00:00"]
Output: 0
 

Constraints:

2 <= timePoints.length <= 2 * 104
timePoints[i] is in the format "HH:MM".

Solution :-

import java.util.List;
import java.util.ArrayList;
import java.util.Collections;

class Solution {
    public int findMinDifference(List<String> timePoints) {
        List<Integer> minutes = new ArrayList<>();

        // Convert times to minutes
        for (String time : timePoints) {
            int hh = Integer.parseInt(time.substring(0, 2));
            int mm = Integer.parseInt(time.substring(3, 5));
            minutes.add(hh * 60 + mm);
        }

        // Sort the times
        Collections.sort(minutes);

        // Calculate differences
        int minDifference = Integer.MAX_VALUE;
        for (int i = 1; i < minutes.size(); i++) {
            int diff = minutes.get(i) - minutes.get(i - 1);
            minDifference = Math.min(minDifference, diff);
        }

        // Consider circular nature of time
        int circularDifference = (minutes.get(0) + 24 * 60) - minutes.get(minutes.size() - 1);
        minDifference = Math.min(minDifference, circularDifference);

        return minDifference;
    }
}
