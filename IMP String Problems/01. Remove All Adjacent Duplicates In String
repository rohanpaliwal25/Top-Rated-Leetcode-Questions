https://leetcode.com/problems/remove-all-adjacent-duplicates-in-string/description/

-----------------------------------------------------------------------------------------------------------------------------------------------------
Problem :- 

You are given a string s consisting of lowercase English letters. A duplicate removal consists of choosing two adjacent and equal letters and removing them.

We repeatedly make duplicate removals on s until we no longer can.

Return the final string after all such duplicate removals have been made. It can be proven that the answer is unique.

 Example 1:

Input: s = "abbaca"
Output: "ca"
Explanation: 
For example, in "abbaca" we could remove "bb" since the letters are adjacent and equal, and this is the only possible move.  The result of this move is that the string is "aaca", of which only "aa" is possible, so the final string is "ca".

----------------------------------------------------------------------------------------------------------------------------------------------------

Solution 1 :- 

class Solution {
    public String removeDuplicates(String s) {
        
        StringBuilder result = new StringBuilder();
        int resultLength = 0;
        for(char c : s.toCharArray())
        {
            if(resultLength > 0 && result.charAt(resultLength - 1) == c)
            {
                result.deleteCharAt(resultLength - 1);
                resultLength--;
            }else{
                result.append(c);
                resultLength++;
            }
        }
    return result.substring(0, resultLength).toString();
    }
}


Solution 2:-


class Solution {
    public String removeDuplicates(String s) {
        char[] arrs = s.toCharArray();
        int end = -1;

        for(char c:arrs) {
            if (end >=0 && arrs[end] == c) {
                end--;
            } else {
                arrs[++end] = c;
            }
        }

        return String.valueOf(arrs,0,end+1);
    }
}
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Important :-


Time Complexity:
Code 1: The time complexity is O(n), where n is the length of the input string s. This is because it iterates through each character in the string once.

Code 2: The time complexity is also O(n) for the same reason. It iterates through the characters in the string once.

Space Complexity:
Code 1: The space complexity is O(n) because it uses a StringBuilder to store the result. In the worst case, the StringBuilder might store all characters from the input string.

Code 2: The space complexity is O(1) because it uses an in-place approach. It modifies the character array in the same array without using additional space proportional to the input size.

Summary:
Both solutions have the same time complexity, but Code 2 has a more efficient space complexity as it uses an in-place approach. In scenarios where minimizing space usage is crucial, Code 2 might be preferred.



